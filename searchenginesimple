import re
from collections import defaultdict
import math

class SimpleSearchEngine:
    def __init__(self):
         self.inverted_index = defaultdict(dict)  # {term: {doc_id: tf}}
         self.documents = {}  # {doc_id: text}
         self.doc_lengths = {}  # {doc_id: length}
         self.total_docs = 0
     
    def preprocess_text(self, text):
     """Convert text to lowercase and tokenize"""
     return re.findall(r'\w+', text.lower())
     
     def add_document(self, doc_id, text):
         """Add a document to the search engine"""
         tokens = self.preprocess_text(text)
         self.documents[doc_id] = text
         self.doc_lengths[doc_id] = len(tokens)
         self.total_docs += 1
        
         term_counts = defaultdict(int)
         for term in tokens:
            term_counts[term] += 1
         
         for term, count in term_counts.items():
             self.inverted_index[term][doc_id] = count
     
     def calculate_tfidf(self, term, doc_id):
         """Calculate TF-IDF score for a term in a document"""
         tf = self.inverted_index.get(term, {}).get(doc_id, 0) / self.doc_lengths[doc_id]
         idf = math.log((1 + self.total_docs) / (1 + len(self.inverted_index.get(term, {}))))
         return tf * idf
    
    def search(self, query, top_n=5):
        """Search for documents matching the query"""
        query_terms = self.preprocess_text(query)
        scores = defaultdict(float)
        
        for term in query_terms:
            if term in self.inverted_index:
                for doc_id in self.inverted_index[term]:
                    scores[doc_id] += self.calculate_tfidf(term, doc_id)
        
        # Sort documents by score
        ranked_docs = sorted(scores.items(), key=lambda x: x[1], reverse=True)
        
        # Return top N results with snippets
        results = []
        for doc_id, score in ranked_docs[:top_n]:
            snippet = self._generate_snippet(doc_id, query_terms)
            results.append({
                'doc_id': doc_id,
                'score': score,
                'snippet': snippet,
                'full_text': self.documents[doc_id]
            })
        
        return results
    
    def _generate_snippet(self, doc_id, query_terms):
        """Generate a text snippet highlighting query terms"""
        text = self.documents[doc_id]
        words = text.split()
        
        # Find positions of query terms
        positions = []
        for i, word in enumerate(words):
            if word.lower() in query_terms:
                positions.append(i)
        
        # Generate snippet around first match
        if positions:
            start = max(0, positions[0] - 5)
            end = min(len(words), positions[0] + 5)
            snippet = ' '.join(words[start:end])
            
            # Highlight terms
            for term in query_terms:
                snippet = re.sub(rf'({term})', r'**\1**', snippet, flags=re.IGNORECASE)
            
            return snippet + "..."
        
        return text[:100] + "..." if len(text) > 100 else text

# Example usage
if __name__ == "__main__":
    engine = SimpleSearchEngine()
    
    # Add some documents
    engine.add_document(1, "Python is a popular programming language for data science and web development.")
    engine.add_document(2, "Machine learning algorithms can be implemented in Python using scikit-learn.")
    engine.add_document(3, "Web development with Python often uses frameworks like Django and Flask.")
    engine.add_document(4, "Artificial intelligence is transforming many industries including healthcare.")
    
    # Perform a search
    query = "Python web development"
    results = engine.search(query)
    
    print(f"Search results for '{query}':")
    for i, result in enumerate(results, 1):
        print(f"\nResult {i} (score: {result['score']:.4f}):")

